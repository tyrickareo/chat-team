from typing import Optional, Union, List, Dict, Literal

import openai
from pydantic import BaseModel
import setting

hello_message = [{"role": "system", "content": "You are a helpful assistant."},
                 {"role": "user", "content": "just answer me 'YES' 10 times"}]


class Message(BaseModel):
    role: Literal["system", "user", "assistant"]
    content: str


class ChatParams(BaseModel):
    """
    ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
    """
    model: str = "gpt-3.5-turbo"

    """
    The messages to generate chat completions for, in the chat format.
    """
    messages: List[Message]

    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
We generally recommend altering this or top_p but not both.
    """
    temperature: Optional[float]

    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
We generally recommend altering this or temperature but not both.
    """
    top_p: Optional[float]

    """
    How many chat completion choices to generate for each input message.
    """
    n: Optional[int]

    """
    If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. See the OpenAI Cookbook for example code.
    """
    stream: Optional[bool]

    """
    Up to 4 sequences where the API will stop generating further tokens.
    """
    stop: Optional[Union[str, List[str]]]

    """
    The maximum number of tokens to generate in the chat completion.The total length of input tokens and generated tokens is limited by the model's context length.
    """
    max_tokens: Optional[int]

    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    """
    presence_penalty: Optional[float]

    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    """
    frequency_penalty: Optional[float]

    """
    Modify the likelihood of specified tokens appearing in the completion.
    
    Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."""
    logit_bias: Optional[Dict]

    """
    A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.
    """
    user: Optional[str]


def get_char_stream(stream):
    for resp in stream:
        yield resp["choices"][0]["delta"].get("content", "")


def call_chat_create(param: ChatParams):
    return openai.ChatCompletion.create(**param.dict(exclude_none=True))


def get_stream_from_openai(messages=None):
    if messages is None or not messages:
        raise ValueError("message sent to openai is empty")
    return call_chat_create(ChatParams(messages=messages, stream=True))


def get_whole_response(messages):
    return "".join(get_char_stream(get_stream_from_openai(messages)))


def test_connection():
    return get_whole_response([Message(role="user", content="just answer me 'connected to openai'")])


async def stream_response_async(msgs: List[Message]):
    param = ChatParams(messages=msgs, stream=True)
    stream = await openai.ChatCompletion.acreate(**param.dict(exclude_none=True))
    async for resp in stream:
        yield resp["choices"][0]["delta"].get("content", "")


